/* Generated By:JJTree: Do not edit this line. AST_new.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class AST_new extends SimpleNode {
  public String type;
  public String info;

  public AST_new(int id) {
    super(id);
  }

  public AST_new(jmm p, int id) {
    super(p, id);
  }

  public String toString() {
    return "new " + type + " " + info;
  }

  void triggerSemanticAnalysis() throws SemanticException {
    if (type.equals("array")) {
      if (!((SimpleNode) children[0]).getType().equals("int")) {
        throw new SemanticException(
            "Invalid array initialization: " + id + " at line " + line + ", column " + column + ".");
      }
    }
  }

  public String getType() {

    if (type.equals("array")) {
      return type;
    } else {
      return info;
    }
  }

  public String getJasmin() {
    String out = "";

    if (type.equals("array")) {
      SimpleNode p = (SimpleNode) parent;

      String assign = null;
      if (p instanceof ASTStatement)
        assign = ((ASTStatement) p).id;

      STEntry local = checkImediateSymbolTable(assign);
      STEntry global = checkSymbolTable(assign);

      int size = Integer.parseInt(((ASTliteral)children[0]).info);

      if (assign != null) {
        if (local == null) {
          if (global != null) {
            out += "aload_0\n";
            out += "ldc " + size + "\n";
            out += "newarray int\n";
            out += "putfield " + assign + "/" + global.order + "\n";
          }
        } else {
          out += "ldc " + size + "\n";
          out += "newarray int\n";
          out += "astore " + local.order + "\n";
        }
      }
    } else {

    }

    return out;
  }
}
/*
 * JavaCC - OriginalChecksum=71f95ffa1708d3507896129b9ea23e12 (do not edit this
 * line)
 */
