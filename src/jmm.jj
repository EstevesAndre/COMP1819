/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jmm.jj */
/*@egen*/options {
  LOOKAHEAD = 1;
                           
                       
             
}

PARSER_BEGIN(jmm)
public
class jmm/*@bgen(jjtree)*/implements jmmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTjmmState jjtree = new JJTjmmState();

/*@egen*/

private
  static int nErrors = 0;
private
  static int MAX_ERRORS = 10;

public
  static void main(String args[]) throws ParseException {

    if(args.length != 1)
    {
      System.out.println("Usage: java jmm <filename>");
      return;
    }

    jmm p;

    try 
    {
      p = new jmm(new java.io.FileInputStream(args[0]));
    } 
    catch (java.io.FileNotFoundException e) 
    {
      System.out.println("error: file " + args[0] + " not found.");
      return;
    }

    SimpleNode root;

    try{
    root = p.Program();
    }
    catch(ParseException e){
        System.out.println(e.toString());
        return;
    }

    root.dump("");
  }

  static void reportError(ParseException e, String statement, boolean recover) {
    System.out.println("Syntatic error on " + statement + " statement.\n\n" +
                       e.toString());
    nErrors++;
  
    if (recover) {
      recoverFromError();
    }
  
    if (nErrors >= MAX_ERRORS) {
      System.out.println("Reached maximum number of errors (" + MAX_ERRORS +
                         "). Terminating.");
      System.exit(1);
    }
  }

  static void recoverFromError() {
    Token t;
    do {
      t = getToken(1);
      if (t.kind == R_PAR)
        return;
      t = getNextToken();
    } while (t.kind != R_PAR);
  }
}
PARSER_END(jmm)

/* Caracters to be skipped */
SKIP :
{
    " " |
    "\t" |
    "\r" |
    "\n" |
    <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> |         /* Inline comments */
    <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">    /* Block comments */
}

/* Reserved words */
TOKEN :
{
    < CLASS : "class"> |
    < EXTENDS : "extends" > |
    < PUBLIC : "public"> |
    < STATIC : "static"> |
    < VOID : "void"> |
    < MAIN : "main"> |
    < STRING : "String"> |
    < RETURN : "return"> |
    < INT : "int"> |
    < BOOL : "boolean"> |
    < IF : "if"> |
    < ELSE : "else"> |
    < WHILE : "while"> |
    < LENGTH : "length"> |
    < T : "true"> |
    < F : "false"> |
    < THIS : "this"> |
    < NEW : "new">
}

/* Stuff :) */
TOKEN :
{
    < L_PAR : "("> | 
    < R_PAR : ")"> | 
    < L_BRACE : "{"> | 
    < R_BRACE : "}"> | 
    < L_BRACKET : "["> | 
    < R_BRACKET : "]"> | 
    < SEMICOLON : ";"> | 
    < COMMA : ","> | 
    < DOT : ".">
}

/* Operations */
TOKEN :
{
    < ASSIGN : "="> | 
    < AND : "&&"> | 
    < LESSTHAN : "<"> | 
    < SUM : "+"> | 
    < SUB : "-"> | 
    < MULT : "*"> | 
    < DIV : "/"> |
    < NOT : "!">
}

/* IntegerLiteral and Identifiers */
TOKEN :
{
    < INTEGER_LITERAL : <DECIMAL> | <OCTAL> | <HEXADECIMAL> | <BINARY> > |
    < #DECIMAL: ["1"-"9"](["0"-"9"])* > |
    < #OCTAL: "0"(["0"-"7"])* > |
    < #HEXADECIMAL: ("0x" | "0X")(["0"-"9", "A"-"F", "a"-"f"])+ > |
    < #BINARY: ("0b" | "0B")(["0", "1"])+ > |
    
    < IDENTIFIER : <LETTER> (<LETTER>|<DIGIT>)* > |
    < #LETTER : ["$", "_", "a"-"z", "A"-"Z"] > |
    < #DIGIT : ["0"-"9"] >
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  ClassDeclaration()<EOF>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
 * Class declaration
 */
void ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
                           ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token id, ext;} {/*@bgen(jjtree) ClassDeclaration */
try {
/*@egen*/
<CLASS> id=<IDENTIFIER> {jjtn000.id = id.image;} (<EXTENDS> ext=<IDENTIFIER> {jjtn000.ext = ext.image;})? 
    <L_BRACE> 
        ( VarDeclaration() )*
        ( <PUBLIC> ( MainDeclaration() | MethodDeclaration() ) )* 
    <R_BRACE>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

/**
 * Variable declaration
 */
void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;} 
{/*@bgen(jjtree) VarDeclaration */
  try {
/*@egen*/ 
  Type() id=<IDENTIFIER> <SEMICOLON>/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {jjtn000.id = id.image;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

/**
 * Main function declaration
 */
void MainDeclaration() : {/*@bgen(jjtree) MainDeclaration */
                          ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;} {/*@bgen(jjtree) MainDeclaration */
try {
/*@egen*/
<STATIC> <VOID> <MAIN> <L_PAR> <STRING> <L_BRACKET> <R_BRACKET> id=<IDENTIFIER> <R_PAR> {jjtn000.id = id.image;}
    <L_BRACE>
        ( LOOKAHEAD(2) VarDeclaration() )*
        ( Statement() )*
    <R_BRACE>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

/**
 * Method declaration
 */
void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
                            ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;} {/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    Type() id=<IDENTIFIER> <L_PAR> Args() <R_PAR>
    <L_BRACE> ( LOOKAHEAD(2) VarDeclaration() )* (Statement())*
    <RETURN> Expression() <SEMICOLON> <R_BRACE>/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/ {jjtn000.id = id.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Arguments
 */
void Args() : {/*@bgen(jjtree) Args */
  ASTArgs jjtn000 = new ASTArgs(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Args */
                   try {
/*@egen*/ (Arg() (<COMMA> Arg()) *) ?/*@bgen(jjtree)*/
                   } catch (Throwable jjte000) {
                     if (jjtc000) {
                       jjtree.clearNodeScope(jjtn000);
                       jjtc000 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte000 instanceof RuntimeException) {
                       throw (RuntimeException)jjte000;
                     }
                     if (jjte000 instanceof ParseException) {
                       throw (ParseException)jjte000;
                     }
                     throw (Error)jjte000;
                   } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                     }
                   }
/*@egen*/ }

/**
 * Argument
 */
void Arg() : {/*@bgen(jjtree) Arg */
              ASTArg jjtn000 = new ASTArg(JJTARG);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;} {/*@bgen(jjtree) Arg */
                           try {
/*@egen*/ Type() id=<IDENTIFIER>/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ {jjtn000.id = id.image;}/*@bgen(jjtree)*/
                           } catch (Throwable jjte000) {
                             if (jjtc000) {
                               jjtree.clearNodeScope(jjtn000);
                               jjtc000 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte000 instanceof RuntimeException) {
                               throw (RuntimeException)jjte000;
                             }
                             if (jjte000 instanceof ParseException) {
                               throw (ParseException)jjte000;
                             }
                             throw (Error)jjte000;
                           } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
                           }
/*@egen*/ }

/**
 * Types possible
 *      int[]
 *      boolean
 *      <identifier>
 */
void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Type */
    try {
/*@egen*/
    ( <INT> {jjtn000.type = "int";} ( <L_BRACKET> <R_BRACKET> {jjtn000.array = true;} )? ) |
    ( <BOOL>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.type = "bool";} ) |
    ( t=<IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.type = t.image;} )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Statements
 *      If then else blocks
 *      Assign values
 */
void Statement() : {/*@bgen(jjtree) Statement */
                    ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token id;} {/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  (<L_BRACE> (Statement())* < R_BRACE >) |
  (If())/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.type = "if";} | 
  (While())/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.type = "while";} |
  (id=<IDENTIFIER> {jjtn000.type = "id"; jjtn000.id = id.image;} (<L_BRACKET> Expression() < R_BRACKET > {jjtn000.array = true;} | {}) ( (<ASSIGN> Expression() < SEMICOLON >/*@bgen(jjtree)*/
                                                                                                                                                                              {
                                                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                jjtc000 = false;
                                                                                                                                                                              }
/*@egen*/ {jjtn000.assign = true;} ) | (Expression_Alt() < SEMICOLON > ))) |
  (ExpressionNoId() < SEMICOLON >/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.type = "no_id";})/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) If */
  try {
/*@egen*/
  try {
    <IF><L_PAR> Expression()<R_PAR> Statement()<ELSE> Statement()
  } catch (ParseException e) {
    reportError(e, "IF", false);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) While */
    try {
/*@egen*/

    <WHILE><L_PAR>

  try {
     Expression()
  } catch (ParseException e) {
    reportError(e, "WHILE", true);
  }

  <R_PAR> Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Expressions    
 */
void Expression()       : {}
{
    And()
}

void And()       : {}
{
    LT() ( LOOKAHEAD(2) <AND>/*@bgen(jjtree) #and( 2) */
                              {
                                ASTand jjtn001 = new ASTand(JJTAND);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ LT()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/        )*
}

void LT()       : {}
{
    Sum() ( LOOKAHEAD(2) <LESSTHAN>/*@bgen(jjtree) #lt( 2) */
                                    {
                                      ASTlt jjtn001 = new ASTlt(JJTLT);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ Sum()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/       )*
}

void Sum()       : {}
{
    Sub() ( LOOKAHEAD(2) <SUM>/*@bgen(jjtree) #sum( 2) */
                               {
                                 ASTsum jjtn001 = new ASTsum(JJTSUM);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ Sub()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/        )*
}

void Sub()       : {}
{
    Mult() ( LOOKAHEAD(2) <SUB>/*@bgen(jjtree) #sub( 2) */
                                {
                                  ASTsub jjtn001 = new ASTsub(JJTSUB);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ Mult()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/        )*
}

void Mult()       : {}
{
    Div() ( LOOKAHEAD(2) <MULT>/*@bgen(jjtree) #mult( 2) */
                                {
                                  ASTmult jjtn001 = new ASTmult(JJTMULT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ Div()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/         )*
}

void Div()       : {}
{
    LowerExpression() ( LOOKAHEAD(2) <DIV>/*@bgen(jjtree) #div( 2) */
                                           {
                                             ASTdiv jjtn001 = new ASTdiv(JJTDIV);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                           }
                                           try {
/*@egen*/ LowerExpression()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte001) {
                                             if (jjtc001) {
                                               jjtree.clearNodeScope(jjtn001);
                                               jjtc001 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte001 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte001;
                                             }
                                             if (jjte001 instanceof ParseException) {
                                               throw (ParseException)jjte001;
                                             }
                                             throw (Error)jjte001;
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                             }
                                           }
/*@egen*/        )*
}

void LowerExpression()       : {Token t;}
{
    ( t=<INTEGER_LITERAL> Expression_Alt()/*@bgen(jjtree) literal */
                                           {
                                             ASTliteral jjtn001 = new ASTliteral(JJTLITERAL);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                           }
                                           try {
/*@egen*//*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn001, true);
                                             jjtc001 = false;
                                           }
/*@egen*/ {jjtn001.info = t.image;}/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001, true);
                                             }
                                           }
/*@egen*/         )| 
    ( <T> Expression_Alt()/*@bgen(jjtree) bool */
                           {
                             ASTbool jjtn002 = new ASTbool(JJTBOOL);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                           }
/*@egen*/ {jjtn002.info = true;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
                           }
/*@egen*/      ) |
    ( <F>/*@bgen(jjtree) bool */
          {
            ASTbool jjtn003 = new ASTbool(JJTBOOL);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ Expression_Alt()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
/*@egen*/       ) |
    ( t=<IDENTIFIER> Expression_Alt()/*@bgen(jjtree) id */
                                      {
                                        ASTid jjtn004 = new ASTid(JJTID);
                                        boolean jjtc004 = true;
                                        jjtree.openNodeScope(jjtn004);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn004, true);
                                        jjtc004 = false;
                                      }
/*@egen*/ {jjtn004.info = t.image;}/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc004) {
                                          jjtree.closeNodeScope(jjtn004, true);
                                        }
                                      }
/*@egen*/     ) |
    ( <THIS>/*@bgen(jjtree) _this */
             {
               AST_this jjtn005 = new AST_this(JJT_THIS);
               boolean jjtc005 = true;
               jjtree.openNodeScope(jjtn005);
             }
             try {
/*@egen*/ Expression_Alt()/*@bgen(jjtree)*/
             } catch (Throwable jjte005) {
               if (jjtc005) {
                 jjtree.clearNodeScope(jjtn005);
                 jjtc005 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte005 instanceof RuntimeException) {
                 throw (RuntimeException)jjte005;
               }
               if (jjte005 instanceof ParseException) {
                 throw (ParseException)jjte005;
               }
               throw (Error)jjte005;
             } finally {
               if (jjtc005) {
                 jjtree.closeNodeScope(jjtn005, true);
               }
             }
/*@egen*/        ) |
    ( <NEW>/*@bgen(jjtree) _new */
            {
              AST_new jjtn006 = new AST_new(JJT_NEW);
              boolean jjtc006 = true;
              jjtree.openNodeScope(jjtn006);
            }
            try {
/*@egen*/ ( 
       ( <INT> <L_BRACKET> Expression() <R_BRACKET> Expression_Alt()/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn006, true);
                                                                       jjtc006 = false;
                                                                     }
/*@egen*/ {jjtn006.type = "array";} ) 
      |
       ( t=<IDENTIFIER> <L_PAR> <R_PAR> Expression_Alt()/*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn006, true);
                                                           jjtc006 = false;
                                                         }
/*@egen*/ {jjtn006.type = "id"; jjtn006.info = t.image;}) 
      )/*@bgen(jjtree)*/
            } catch (Throwable jjte006) {
              if (jjtc006) {
                jjtree.clearNodeScope(jjtn006);
                jjtc006 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte006 instanceof RuntimeException) {
                throw (RuntimeException)jjte006;
              }
              if (jjte006 instanceof ParseException) {
                throw (ParseException)jjte006;
              }
              throw (Error)jjte006;
            } finally {
              if (jjtc006) {
                jjtree.closeNodeScope(jjtn006, true);
              }
            }
/*@egen*/       ) |
    ( <NOT> Expression()/*@bgen(jjtree) not */
                         {
                           ASTnot jjtn007 = new ASTnot(JJTNOT);
                           boolean jjtc007 = true;
                           jjtree.openNodeScope(jjtn007);
                         }
                         try {
/*@egen*/ Expression_Alt()/*@bgen(jjtree)*/
                         } catch (Throwable jjte007) {
                           if (jjtc007) {
                             jjtree.clearNodeScope(jjtn007);
                             jjtc007 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte007 instanceof RuntimeException) {
                             throw (RuntimeException)jjte007;
                           }
                           if (jjte007 instanceof ParseException) {
                             throw (ParseException)jjte007;
                           }
                           throw (Error)jjte007;
                         } finally {
                           if (jjtc007) {
                             jjtree.closeNodeScope(jjtn007, true);
                           }
                         }
/*@egen*/      ) |
    ( <L_PAR> Expression() <R_PAR> Expression_Alt() )
}

void ExpressionNoId()       : {Token t;}
{
    ( t=<INTEGER_LITERAL> Expression_Alt()/*@bgen(jjtree) literal */
                                           {
                                             ASTliteral jjtn001 = new ASTliteral(JJTLITERAL);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                           }
                                           try {
/*@egen*//*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn001, true);
                                             jjtc001 = false;
                                           }
/*@egen*/ {jjtn001.info = t.image;}/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001, true);
                                             }
                                           }
/*@egen*/         )| 
    ( <T> Expression_Alt()/*@bgen(jjtree) bool */
                           {
                             ASTbool jjtn002 = new ASTbool(JJTBOOL);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                           }
/*@egen*/ {jjtn002.info = true;}/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                             }
                           }
/*@egen*/      ) |
    ( <F>/*@bgen(jjtree) bool */
          {
            ASTbool jjtn003 = new ASTbool(JJTBOOL);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ Expression_Alt()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
/*@egen*/       ) |
    ( <THIS>/*@bgen(jjtree) _this */
             {
               AST_this jjtn004 = new AST_this(JJT_THIS);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
             }
             try {
/*@egen*/ Expression_Alt()/*@bgen(jjtree)*/
             } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 throw (RuntimeException)jjte004;
               }
               if (jjte004 instanceof ParseException) {
                 throw (ParseException)jjte004;
               }
               throw (Error)jjte004;
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
               }
             }
/*@egen*/        ) |
    ( <NEW>/*@bgen(jjtree) _new */
            {
              AST_new jjtn005 = new AST_new(JJT_NEW);
              boolean jjtc005 = true;
              jjtree.openNodeScope(jjtn005);
            }
            try {
/*@egen*/ ( ( <INT> <L_BRACKET> Expression() <R_BRACKET> Expression_Alt()/*@bgen(jjtree)*/
                                                                            {
                                                                              jjtree.closeNodeScope(jjtn005, true);
                                                                              jjtc005 = false;
                                                                            }
/*@egen*/ {jjtn005.type = "array";}) |
            ( t=<IDENTIFIER> <L_PAR> <R_PAR> Expression_Alt()/*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn005, true);
                                                                jjtc005 = false;
                                                              }
/*@egen*/ {jjtn005.type = "id"; jjtn005.info = t.image;} ) )/*@bgen(jjtree)*/
            } catch (Throwable jjte005) {
              if (jjtc005) {
                jjtree.clearNodeScope(jjtn005);
                jjtc005 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte005 instanceof RuntimeException) {
                throw (RuntimeException)jjte005;
              }
              if (jjte005 instanceof ParseException) {
                throw (ParseException)jjte005;
              }
              throw (Error)jjte005;
            } finally {
              if (jjtc005) {
                jjtree.closeNodeScope(jjtn005, true);
              }
            }
/*@egen*/       ) |
    ( <NOT> Expression()/*@bgen(jjtree) not */
                         {
                           ASTnot jjtn006 = new ASTnot(JJTNOT);
                           boolean jjtc006 = true;
                           jjtree.openNodeScope(jjtn006);
                         }
                         try {
/*@egen*/ Expression_Alt()/*@bgen(jjtree)*/
                         } catch (Throwable jjte006) {
                           if (jjtc006) {
                             jjtree.clearNodeScope(jjtn006);
                             jjtc006 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte006 instanceof RuntimeException) {
                             throw (RuntimeException)jjte006;
                           }
                           if (jjte006 instanceof ParseException) {
                             throw (ParseException)jjte006;
                           }
                           throw (Error)jjte006;
                         } finally {
                           if (jjtc006) {
                             jjtree.closeNodeScope(jjtn006, true);
                           }
                         }
/*@egen*/      ) |
    ( <L_PAR> Expression() <R_PAR> Expression_Alt() )
}

/**
 * Auxiliar expression - to prevent left side recursion
 */
void Expression_Alt()       : {Token t;}
{
    ( <L_BRACKET> Expression() <R_BRACKET> Expression_Alt() ) |
    ( <DOT>/*@bgen(jjtree) field */
            {
              ASTfield jjtn001 = new ASTfield(JJTFIELD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ (( <LENGTH> Expression_Alt()/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn001, true);
                                           jjtc001 = false;
                                         }
/*@egen*/ {jjtn001.type = "length";} ) |
             ( t=<IDENTIFIER> <L_PAR> ( Expression() ( <COMMA> Expression() )* )? <R_PAR> Expression_Alt()/*@bgen(jjtree)*/
                                                                                                           {
                                                                                                             jjtree.closeNodeScope(jjtn001, true);
                                                                                                             jjtc001 = false;
                                                                                                           }
/*@egen*/ {jjtn001.type = "id"; jjtn001.info = t.image;} ) )/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/        ) |
    {}
}