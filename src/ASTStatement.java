/* Generated By:JJTree: Do not edit this line. ASTStatement.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTStatement extends SimpleNode {
  public String type;
  public String id;
  public boolean array = false;
  public boolean assign = false;

  public ASTStatement(int id) {
    super(id);
  }

  public ASTStatement(jmm p, int id) {
    super(p, id);
  }

  public String toString() {
    return "statement " + type + ((id != null) ? (" " + id) : "") + (array ? "[]" : "") + (assign ? " =" : "");
  }

  void triggerSemanticAnalysis() throws SemanticException {
    if (array) {
      if (!((SimpleNode) children[0]).getType().equals("int")) {
        throw new SemanticException("Invalid array access: " + id + " at line " + line + ", column " + column + ".");
      }

      STEntry entry = checkSymbolTable(id);

      if (!entry.type.equals("int[]")) {
        throw new SemanticException(id + " is not an array at line " + line + ", column " + column + ".");
      }

    }

    if (assign) {
      // entry is the entry of the variable for the value to the left of assign
      STEntry entry = checkSymbolTable(id);

      Node p = parent;
      while (p != null) {
        if ((p instanceof ASTIf) || (p instanceof ASTWhile))
          break;

        p = ((SimpleNode) p).parent;
      }

      if (p == null && entry.line == -1) {
        entry.line = line;
        entry.column = column;
      }

      if (entry.type != null) {
        if (entry.type.equals("int[]")) {
          if (children[0] instanceof AST_new) {
            AST_new new_node = ((AST_new) (children[0]));
            if (new_node.info != "new") {
              throw new SemanticException("Invalid assignment: expected int array, found " + new_node.info + " at line "
                  + new_node.line + ", column " + new_node.column + ".");
            }
          }

          if (children.length > 1 && !((SimpleNode) children[1]).getType().equals("int")) {
            throw new SemanticException("Invalid assignment: expected int, found "
                + ((SimpleNode) children[1]).getType() + " at line " + line + ", column " + column + ".");
          }
        } else if (!((SimpleNode) children[0]).getType().equals(entry.type)) {
          throw new SemanticException("Invalid assignment: expected " + entry.type + ", found "
              + ((SimpleNode) children[0]).getType() + " at line " + line + ", column " + column + ".");
        }
      } else {
        throw new SemanticException("Undeclared variable: " + id + " at line " + line + ", column " + column + ".");
      }
    }

    if (type != null && !assign && type.equals("id")) {
      STEntry entry = checkSymbolTable(id);

      if (entry != null && entry.compareTo(new STVar(-1, id, type, line, column)) < 0)
        throw new SemanticException(
            "Variable may not have been initialized: " + id + " at line " + line + ", column " + column + ".");
    }
  }

  public String getJasmin() {
    String out = "";

    if (array && assign) {
      System.out.println("CENAS");
      SimpleNode p = (SimpleNode) parent;

      String assign = null;
      if (p instanceof ASTStatement)
        assign = ((ASTStatement) p).id;

      STEntry local = checkImediateSymbolTable(assign);
      STEntry global = checkSymbolTable(assign);

      Node index = children[0];
      Node val = children[1];

      if (assign != null) {
        if (local == null) {
          if (global != null) {
            out += "aload_0\n";
            
            if(index instanceof ASTid){
              out += "ldc " + ((ASTid) index).info;
            }
            else if (index instanceof ASTliteral){
              out += "ldc " + ((ASTliteral) index).info;
            }
            else {
              out += ((SimpleNode)index).getJasmin();
            }

            if(val instanceof ASTid){
              out += "ldc " + ((ASTid) val).info;
            }
            else if (val instanceof ASTliteral){
              out += "ldc " + ((ASTliteral) val).info;
            }
            else {
              out += ((SimpleNode)val).getJasmin();
            }
            out += "putfield " + assign + "/" + global.order + "\n";
          }
        } else {
          out += "aload \n" + local.order + "\n";

          if(index instanceof ASTid){
            out += "ldc " + ((ASTid) index).info;
          }
          else if (index instanceof ASTliteral){
            out += "ldc " + ((ASTliteral) index).info;
          }
          else {
            out += ((SimpleNode)index).getJasmin();
          }

          if(val instanceof ASTid){
            out += "ldc " + ((ASTid) val).info;
          }
          else if (val instanceof ASTliteral){
            out += "ldc " + ((ASTliteral) val).info;
          }
          else {
            out += ((SimpleNode)val).getJasmin();
          }

          out += "iastore\n";
        }
      }
    }
    
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode) children[i];
        if (n != null) {
          out += n.getJasmin();
        }
      }
    }

    return out;
  }

}
/*
 * JavaCC - OriginalChecksum=d080604f9202b38270c2414fd96b3d8a (do not edit this
 * line)
 */
