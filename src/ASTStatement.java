/* Generated By:JJTree: Do not edit this line. ASTStatement.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTStatement extends SimpleNode {
  public String type;
  public String id;
  public boolean array = false;
  public boolean assign = false;
  
  public ASTStatement(int id) {
    super(id);
  }

  public ASTStatement(jmm p, int id) {
    super(p, id);
  }

  public String toString() {
    return "statement " + type + ( (id != null) ? (" " + id) : "" ) + ( array ? "[]" : "") + (assign ? " =" : "");
  }
  
  void triggerSemanticAnalysis() throws SemanticException
  {
    if(array)
    {
      if(!((SimpleNode) children[0]).getType().equals("int"))
      {
        throw new SemanticException("Invalid array access: " + id + " at line " + line + ", column " + column + ".");
      }

      STEntry entry = checkSymbolTable(id);

      if(!entry.type.equals("int[]")){
        throw new SemanticException(id + " is not an array at line " + line + ", column " + column + ".");
      }
      
    }

    if(assign)
    {
      STEntry entry = checkSymbolTable(id);

      if(!(parent instanceof ASTIf) && !(parent instanceof ASTWhile) && entry.line == -1)
      {
        entry.line = line;
        entry.column = column;
      }

      if(entry.type != null)
      { System.out.println("id: " + id);
        System.out.println("type: " + type);
        System.out.println("entry.type: " + entry.type);
        
        for(int i = 0; i < children.length; i++){
          System.out.println("child" + i + " " + ((SimpleNode) children[i]).getType());

        }

        if(entry.type.equals("int[]"))
        {
          if(!((SimpleNode) children[1]).getType().equals("int"))
          {
            throw new SemanticException("Invalid assignment: expected int, found " + ((SimpleNode) children[1]).getType() + " at line " + line + ", column " + column + ".");
          }
        }
        else if (!((SimpleNode) children[0]).getType().equals(entry.type))
        {
          throw new SemanticException("Invalid assignment: expected " + entry.type + ", found " + ((SimpleNode) children[0]).getType() + " at line " + line + ", column " + column + ".");
        }
      }
      else
      {
        throw new SemanticException("Undeclared variable: " + id + " at line " + line + ", column " + column + ".");
      }
    }

    if(type.equals("id"))
    {
      STEntry entry = checkSymbolTable(id);
      
      if(entry.compareTo(new STVar(id, type, line, column)) < 0)
        throw new SemanticException("Variable may not have been initialized: " + id + " at line " + line + ", column " + column + ".");
    }
  }

}
/* JavaCC - OriginalChecksum=d080604f9202b38270c2414fd96b3d8a (do not edit this line) */
